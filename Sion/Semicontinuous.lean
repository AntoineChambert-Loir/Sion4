import Mathlib
-- import Mathlib.Topology.Semicontinuous
-- import Mathlib.Topology.Order.LowerUpperTopology
section Semicontinuity

/-!

- `LowerSemicontinuous.is_compact.exists_forall_le` :
  We prove that lower semicontinuous functions attain their lower bound
  on a nonempty compact set.

- `LowerSemicontinuous.bdd_below_on.is_compact` :
  As a consequence, a lower semicontinuous function
  on a compact set is bounded below.

We then prove the opposite results for upper semicontinuous functions :

- `UpperSemicontinuous.is_compact.exists_forall_ge`

- `bdd_above_on.is_compact`

The proofs follow Bourbaki, *General Topology*, chapter 4, ¬ß6, n¬∞2.
I do them twice (copy paste worked well), without trying to get ones
from the other by passing to the opposite order on `Œ≤`.

However, they could also be done using the general machinery already in mathlib,
namely proving that a function `f: Œ± ‚Üí Œ≤` is upper semicontinuous iff it is continuous
when `Œ≤` is endowed with `with_lower_topology Œ≤`, and characterizing
the compact sets of `with_lower_topology Œ≤` as those which have a maximal element.

I tried to do so but quickly bumped on missing instances,
such as `complete_linear_order_topology (with_lower_topology Œ≤)`.
And indeed, `with_lower_topology Œ≤` does ***not*** satisfy `order_topology` !

In any case, `with_upper_topology` is missing, so we should also play with
the opposite order.

Another difficulty is the type of order we want to impose on Œ≤.
Ultimately, it has to be `conditionally_complete_linear_order Œ≤`, to allow for `‚Ñù`,
but it would simplify the proofs to do it for `complete_linear_order Œ≤`,
and adding `‚ä§` and `‚ä•` at the end if needed.
Inded, for `conditionally_complete_linear_order Œ≤`, the `supr` and `infi` only
do what one expects under additional `bdd_above` or `bdd_below` assumptions
which are painful to check each time.
(Moreover, the `simp` lemmas may be missing. )

-/
open scoped Filter Topology

open Set Filter

section Preorder

open Set

variable {a Œ≤ : Type*} [Preorder Œ≤] {f : Œ± ‚Üí Œ≤} {s : Set Œ±} {a : Œ±}

-- move to [Mathlib.Order.Filter.Extr]
theorem _root_.IsMinOn.isGLB (ha : a ‚àà s) (hfsa : IsMinOn f s a) :
    IsGLB {f x | x ‚àà s} (f a) := by
  rw [isGLB_iff_le_iff]
  intro b
  simp only [mem_lowerBounds, mem_setOf_eq, forall_exists_index, and_imp, forall_apply_eq_imp_iff‚ÇÇ]
  exact ‚ü®fun hba x hx ‚Ü¶ le_trans hba (hfsa hx), fun hb ‚Ü¶ hb a ha‚ü©

theorem _root_.IsMaxOn.isLUB (ha : a ‚àà s) (hfsa : IsMaxOn f s a) :
    IsLUB {f x | x ‚àà s} (f a) := by
  rw [isLUB_iff_le_iff]
  intro b
  simp only [mem_upperBounds, mem_setOf_eq, forall_exists_index, and_imp, forall_apply_eq_imp_iff‚ÇÇ]
  exact ‚ü®fun hba x hx ‚Ü¶ le_trans (hfsa hx) hba, fun hb ‚Ü¶ hb a ha‚ü©

variable [TopologicalSpace Œ±]

theorem LowerSemicontinuousWithinAt.congr
    (has : a ‚àà s) (hfg : ‚àÄ·∂† x in nhdsWithin a s, f x = g x) :
    LowerSemicontinuousWithinAt f s a ‚Üî LowerSemicontinuousWithinAt g s a := by
  unfold LowerSemicontinuousWithinAt
  apply forall_congr'
  intro b
  rw [Filter.EventuallyEq.eq_of_nhdsWithin hfg has]
  apply imp_congr Iff.rfl
  apply Filter.eventually_congr
  apply Filter.Eventually.mono hfg
  intro x hx
  rw [hx]

theorem UpperSemicontinuousWithinAt.congr
    (has : a ‚àà s) (hfg : ‚àÄ·∂† x in nhdsWithin a s, f x = g x) :
    UpperSemicontinuousWithinAt f s a ‚Üî UpperSemicontinuousWithinAt g s a :=
  LowerSemicontinuousWithinAt.congr (Œ≤ := Œ≤·µí·µà) has hfg

variable {Œ≥ : Type*} [TopologicalSpace Œ≥] {g : Œ≥ ‚Üí Œ±} {x : Œ≥} {t : Set Œ≥}

theorem LowerSemicontinuousWithinAt.comp
    (hf : LowerSemicontinuousWithinAt f s (g x)) (hg : ContinuousWithinAt g t x)
    (hg' : MapsTo g t s) :
    LowerSemicontinuousWithinAt (f ‚àò g) t x := fun b hb ‚Ü¶
  (hg.tendsto_nhdsWithin hg').eventually (hf b hb)

theorem LowerSemicontinuousAt.comp
    (hf : LowerSemicontinuousAt f (g x)) (hg : ContinuousAt g x) :
    LowerSemicontinuousAt (f ‚àò g) x := fun b hb ‚Ü¶
  hg.eventually (hf b hb)

theorem LowerSemicontinuousOn.comp
    (hf : LowerSemicontinuousOn f s) (hg : ContinuousOn g t) (hg' : MapsTo g t s) :
    LowerSemicontinuousOn (f ‚àò g) t := fun x hx ‚Ü¶
  (hf (g x) (hg' hx)).comp (hg x hx) hg'

theorem LowerSemicontinuous.comp
    (hf : LowerSemicontinuous f) (hg : Continuous g) : LowerSemicontinuous (f ‚àò g) := fun x ‚Ü¶
  (hf (g x)).comp hg.continuousAt

theorem lowerSemicontinuousOn_iff_restrict :
    LowerSemicontinuousOn f s ‚Üî LowerSemicontinuous (s.restrict f) := by
  rw [LowerSemicontinuousOn, LowerSemicontinuous, SetCoe.forall]
  refine' forall‚ÇÇ_congr fun a ha ‚Ü¶ forall‚ÇÇ_congr fun b _ ‚Ü¶ _
  simp only [nhdsWithin_eq_map_subtype_coe ha, eventually_map, restrict]

theorem lowerSemicontinuousOn_iff_preimage_Ioi :
    LowerSemicontinuousOn f s ‚Üî ‚àÄ b, ‚àÉ u, IsOpen u ‚àß s ‚à© f ‚Åª¬π' Set.Ioi b = s ‚à© u := by
  simp only [lowerSemicontinuousOn_iff_restrict, restrict_eq,
    lowerSemicontinuous_iff_isOpen_preimage, preimage_comp, isOpen_induced_iff,
    Subtype.preimage_coe_eq_preimage_coe_iff, eq_comm]

variable {Œπ : Type*} {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {I : Set Œπ}

theorem lowerSemicontinuousOn_of_forall_isMaxOn_and_mem
    (hfy : ‚àÄ i ‚àà I, LowerSemicontinuousOn (f i) s)
    {M : Œ± ‚Üí Œπ}
    (M_mem : ‚àÄ x ‚àà s, M x ‚àà I)
    (M_max : ‚àÄ x ‚àà s, IsMaxOn (fun y ‚Ü¶ f y x) I (M x)) :
    LowerSemicontinuousOn (fun x ‚Ü¶ f (M x) x) s := by
  intro x hx b hb
  apply Filter.Eventually.mp <| hfy (M x) (M_mem x hx) x hx b hb
  apply eventually_nhdsWithin_of_forall
  intro z hz h
  exact lt_of_lt_of_le h (M_max z hz (M_mem x hx))

theorem upperSemicontinuousOn_of_forall_isMinOn_and_mem
    (hfy : ‚àÄ i ‚àà I, UpperSemicontinuousOn (f i) s)
    {m : Œ± ‚Üí Œπ}
    (m_mem : ‚àÄ x ‚àà s, m x ‚àà I)
    (m_min : ‚àÄ x ‚àà s, IsMinOn (fun i ‚Ü¶ f i x) I (m x)) :
    UpperSemicontinuousOn (fun x ‚Ü¶ f (m x) x) s :=
  lowerSemicontinuousOn_of_forall_isMaxOn_and_mem (Œ≤ := Œ≤·µí·µà) hfy m_mem m_min

end Preorder

section LinearOrder

variable {Œ± : Type*} {Œ≤ : Type*} [TopologicalSpace Œ±] [LinearOrder Œ≤]
  {f g : Œ± ‚Üí Œ≤} {s : Set Œ±} {a : Œ±}

section LowerSemicontinuous

theorem lowerSemicontinuousOn_iff_preimage_Iic :
    LowerSemicontinuousOn f s ‚Üî ‚àÄ b, ‚àÉ v : Set Œ±, IsClosed v ‚àß s ‚à© f ‚Åª¬π' Set.Iic b = s ‚à© v := by
  simp only [lowerSemicontinuousOn_iff_restrict, restrict_eq,
    lowerSemicontinuous_iff_isClosed_preimage, preimage_comp, isClosed_induced_iff,
    Subtype.preimage_coe_eq_preimage_coe_iff, eq_comm]

theorem LowerSemicontinuousWithinAt.sup
    (hf : LowerSemicontinuousWithinAt f s a) (hg : LowerSemicontinuousWithinAt g s a) :
    LowerSemicontinuousWithinAt (fun x ‚Ü¶ f x ‚äî g x) s a := by
  intro b hb
  simp only [lt_sup_iff] at hb ‚ä¢
  rcases hb with hb | hb
  ¬∑ filter_upwards [hf b hb] with x using Or.intro_left _
  ¬∑ filter_upwards [hg b hb] with x using Or.intro_right _

theorem LowerSemicontinuousAt.sup
    (hf : LowerSemicontinuousAt f a) (hg : LowerSemicontinuousAt g a) :
    LowerSemicontinuousAt (fun x ‚Ü¶ f x ‚äî g x) a := by
  rw [‚Üê lowerSemicontinuousWithinAt_univ_iff] at *
  exact hf.sup hg

theorem LowerSemicontinuousOn.sup
    (hf : LowerSemicontinuousOn f s) (hg : LowerSemicontinuousOn g s) :
    LowerSemicontinuousOn (fun x ‚Ü¶ f x ‚äî g x) s := fun a ha ‚Ü¶
  (hf a ha).sup (hg a ha)

theorem LowerSemicontinuous.sup
    (hf : LowerSemicontinuous f) (hg : LowerSemicontinuous g) :
    LowerSemicontinuous fun x ‚Ü¶ f x ‚äî g x := fun a ‚Ü¶
  (hf a).sup (hg a)

theorem LowerSemicontinuousWithinAt.inf
    (hf : LowerSemicontinuousWithinAt f s a) (hg : LowerSemicontinuousWithinAt g s a) :
    LowerSemicontinuousWithinAt (fun x ‚Ü¶ f x ‚äì g x) s a := by
  intro b hb
  simp only [lt_inf_iff] at hb ‚ä¢
  exact Eventually.and (hf b hb.1) (hg b hb.2)

theorem LowerSemicontinuousAt.inf
    (hf : LowerSemicontinuousAt f a) (hg : LowerSemicontinuousAt g a) :
    LowerSemicontinuousAt (fun x ‚Ü¶ f x ‚äì g x) a := by
  rw [‚Üê lowerSemicontinuousWithinAt_univ_iff] at *
  exact hf.inf hg

theorem LowerSemicontinuousOn.inf
    (hf : LowerSemicontinuousOn f s) (hg : LowerSemicontinuousOn g s) :
    LowerSemicontinuousOn (fun x ‚Ü¶ f x ‚äì g x) s := fun a ha ‚Ü¶
  (hf a ha).inf (hg a ha)

theorem LowerSemicontinuous.inf (hf : LowerSemicontinuous f)
    (hg : LowerSemicontinuous g) :
    LowerSemicontinuous fun x ‚Ü¶ f x ‚äì g x := fun a ‚Ü¶
  (hf a).inf (hg a)

/-- A lower semicontinuous function attains its lower bound on a nonempty compact set. -/
theorem LowerSemicontinuousOn.exists_forall_le_of_isCompact {s : Set Œ±} (ne_s : s.Nonempty)
    (hs : IsCompact s) (hf : LowerSemicontinuousOn f s) :
    ‚àÉ a ‚àà s, ‚àÄ x ‚àà s, f a ‚â§ f x := by
  haveI : Nonempty Œ± := ‚ü®ne_s.choose‚ü©
  haveI : Nonempty s := ‚ü®‚ü®ne_s.choose, ne_s.choose_spec‚ü©‚ü©
  let œÜ : Œ≤ ‚Üí Filter Œ± := fun b ‚Ü¶ ùìü (s ‚à© f ‚Åª¬π' Iic b)
  let ‚Ñ± : Filter Œ± := ‚®Ö a : s, œÜ (f a)
  have : ‚Ñ±.NeBot := by
    refine' iInf_neBot_of_directed _ _
    ¬∑ change Directed GE.ge (fun x ‚Ü¶ (œÜ ‚àò (fun (a : s) ‚Ü¶ f ‚Üëa)) x)
      refine' Directed.mono_comp GE.ge _ _
      ¬∑ intro x y hxy
        refine'
          principal_mono.mpr (inter_subset_inter_right _ (preimage_mono <| Iic_subset_Iic.mpr hxy))
      ¬∑ apply IsTotal.directed
    ¬∑ intro x
      have : (pure x : Filter Œ±) ‚â§ œÜ (f x) := le_principal_iff.mpr ‚ü®x.2, le_refl (f x)‚ü©
      exact neBot_of_le this
  have h‚Ñ±s : ‚Ñ± ‚â§ ùìü s :=
    iInf_le_of_le ‚ü®ne_s.choose, ne_s.choose_spec‚ü© (principal_mono.mpr <| inter_subset_left)
  have h‚Ñ± : ‚àÄ x ‚àà s, ‚àÄ·∂† y in ‚Ñ±, f y ‚â§ f x := fun x hx ‚Ü¶
    mem_iInf_of_mem ‚ü®x, hx‚ü© (by simp only [mem_principal]; apply inter_subset_right)
  obtain ‚ü®a, ha, h‚ü© := hs h‚Ñ±s
  letI : (ùìù a ‚äì ‚Ñ±).NeBot := h
  refine' ‚ü®a, ha, fun x hx ‚Ü¶ le_of_not_gt fun hxa ‚Ü¶ _‚ü©
  suffices ‚àÄ·∂† _ in ùìù a ‚äì ‚Ñ±, False by rwa [eventually_const] at this
  filter_upwards [(hf a ha (f x) hxa).filter_mono (inf_le_inf_left _ h‚Ñ±s),
    (h‚Ñ± x hx).filter_mono (inf_le_right : ùìù a ‚äì ‚Ñ± ‚â§ ‚Ñ±)] using fun y h‚ÇÅ h‚ÇÇ ‚Ü¶ not_le_of_gt h‚ÇÅ h‚ÇÇ

/-- A lower semicontinuous function attains its lower bound on a nonempty compact set. -/
theorem LowerSemicontinuousOn.exists_isMinOn {s : Set Œ±} (ne_s : s.Nonempty)
    (hs : IsCompact s) (hf : LowerSemicontinuousOn f s) :
    ‚àÉ a ‚àà s, IsMinOn f s a :=
  hf.exists_forall_le_of_isCompact ne_s hs

/-- A lower semicontinuous function is bounded below on a compact set. -/
theorem LowerSemicontinuousOn.bddBelow_of_isCompact [Nonempty Œ≤] {s : Set Œ±} (hs : IsCompact s)
    (hf : LowerSemicontinuousOn f s) : BddBelow (f '' s) := by
  cases s.eq_empty_or_nonempty with
  | inl h =>
      simp only [h, Set.image_empty]
      exact bddBelow_empty
  | inr h =>
      obtain ‚ü®a, _, has‚ü© := LowerSemicontinuousOn.exists_forall_le_of_isCompact h hs hf
      use f a
      rintro b ‚ü®x, hx, rfl‚ü©; exact has x hx

end LowerSemicontinuous

section UpperSemicontinuous

theorem UpperSemicontinuousWithinAt.inf
    (hf : UpperSemicontinuousWithinAt f s a) (hg : UpperSemicontinuousWithinAt g s a) :
    UpperSemicontinuousWithinAt (fun x ‚Ü¶ f x ‚äì g x) s a :=
  LowerSemicontinuousWithinAt.sup (Œ≤ := Œ≤·µí·µà) hf hg

theorem UpperSemicontinuousAt.inf
    (hf : UpperSemicontinuousAt f a) (hg : UpperSemicontinuousAt g a) :
    UpperSemicontinuousAt (fun x ‚Ü¶ f x ‚äì g x) a :=
  LowerSemicontinuousAt.sup (Œ≤ := Œ≤·µí·µà) hf hg

theorem UpperSemicontinuousOn.inf
    (hf : UpperSemicontinuousOn f s) (hg : UpperSemicontinuousOn g s) :
    UpperSemicontinuousOn (fun x ‚Ü¶ f x ‚äì g x) s :=
  LowerSemicontinuousOn.sup (Œ≤ := Œ≤·µí·µà) hf hg

theorem UpperSemicontinuous.inf (hf : UpperSemicontinuous f) (hg : UpperSemicontinuous g) :
    UpperSemicontinuous (fun x ‚Ü¶ f x ‚äì g x) :=
  LowerSemicontinuous.sup (Œ≤ := Œ≤·µí·µà) hf hg

theorem UpperSemicontinuousWithinAt.sup
    (hf : UpperSemicontinuousWithinAt f s a) (hg : UpperSemicontinuousWithinAt g s a) :
    UpperSemicontinuousWithinAt (fun x ‚Ü¶ f x ‚äî g x) s a :=
  LowerSemicontinuousWithinAt.inf (Œ≤ := Œ≤·µí·µà) hf hg

theorem UpperSemicontinuousAt.sup
    (hf : UpperSemicontinuousAt f a) (hg : UpperSemicontinuousAt g a) :
    UpperSemicontinuousAt (fun x ‚Ü¶ f x ‚äî g x) a :=
  LowerSemicontinuousAt.inf (Œ≤ := Œ≤·µí·µà) hf hg

theorem UpperSemicontinuousOn.sup
    (hf : UpperSemicontinuousOn f s) (hg : UpperSemicontinuousOn g s) :
    UpperSemicontinuousOn (fun x ‚Ü¶ f x ‚äî g x) s :=
  LowerSemicontinuousOn.inf (Œ≤ := Œ≤·µí·µà) hf hg

theorem UpperSemicontinuous.sup (hf : UpperSemicontinuous f) (hg : UpperSemicontinuous g) :
    UpperSemicontinuous fun x ‚Ü¶ f x ‚äî g x :=
  LowerSemicontinuous.inf (Œ≤ := Œ≤·µí·µà) hf hg

variable {Œ≥ : Type*} [TopologicalSpace Œ≥] {g : Œ≥ ‚Üí Œ±} {x : Œ≥} {t : Set Œ≥}

theorem UpperSemicontinuousWithinAt.comp
    (hf : UpperSemicontinuousWithinAt f s (g x)) (hg : ContinuousWithinAt g t x)
    (hg' : MapsTo g t s) :
    UpperSemicontinuousWithinAt (f ‚àò g) t x :=
  LowerSemicontinuousWithinAt.comp (Œ≤ := Œ≤·µí·µà) hf hg hg'

theorem UpperSemicontinuousAt.comp
    (hf : UpperSemicontinuousAt f (g x)) (hg : ContinuousAt g x) :
    UpperSemicontinuousAt (f ‚àò g) x :=
  LowerSemicontinuousAt.comp (Œ≤ := Œ≤·µí·µà) hf hg

theorem UpperSemicontinuousOn.comp
    (hf : UpperSemicontinuousOn f s) (hg : ContinuousOn g t) (hg' : MapsTo g t s) :
    UpperSemicontinuousOn (f ‚àò g) t :=
  LowerSemicontinuousOn.comp (Œ≤ := Œ≤·µí·µà) hf hg hg'

theorem UpperSemicontinuous.comp
    (hf : UpperSemicontinuous f) (hg : Continuous g) : UpperSemicontinuous (f ‚àò g) :=
  LowerSemicontinuous.comp (Œ≤ := Œ≤·µí·µà) hf hg

theorem upperSemicontinuousOn_iff_restrict {s : Set Œ±} :
    UpperSemicontinuousOn f s ‚Üî UpperSemicontinuous (s.restrict f) :=
  lowerSemicontinuousOn_iff_restrict (Œ≤ := Œ≤·µí·µà)

theorem upperSemicontinuousOn_iff_preimage_Iio :
    UpperSemicontinuousOn f s ‚Üî ‚àÄ b, ‚àÉ u : Set Œ±, IsOpen u ‚àß s ‚à© f ‚Åª¬π' Set.Iio b = s ‚à© u :=
  lowerSemicontinuousOn_iff_preimage_Ioi (Œ≤ := Œ≤·µí·µà)

theorem upperSemicontinuousOn_iff_preimage_Ici :
    UpperSemicontinuousOn f s ‚Üî ‚àÄ b, ‚àÉ v : Set Œ±, IsClosed v ‚àß s ‚à© f ‚Åª¬π' Set.Ici b = s ‚à© v :=
  lowerSemicontinuousOn_iff_preimage_Iic (Œ≤ := Œ≤·µí·µà)

/-- An upper semicontinuous function attains its upper bound on a nonempty compact set. -/
theorem UpperSemicontinuousOn.exists_forall_ge_of_isCompact {s : Set Œ±} (ne_s : s.Nonempty)
    (hs : IsCompact s) (hf : UpperSemicontinuousOn f s) : ‚àÉ a ‚àà s, ‚àÄ x ‚àà s, f x ‚â§ f a :=
  LowerSemicontinuousOn.exists_forall_le_of_isCompact (Œ≤ := Œ≤·µí·µà) ne_s hs hf

/-- An upper semicontinuous function attains its upper bound on a nonempty compact set. -/
theorem UpperSemicontinuousOn.exists_isMaxOn {s : Set Œ±} (ne_s : s.Nonempty)
    (hs : IsCompact s) (hf : UpperSemicontinuousOn f s) :
    ‚àÉ a ‚àà s, IsMaxOn f s a :=
  LowerSemicontinuousOn.exists_isMinOn (Œ≤ := Œ≤·µí·µà) ne_s hs hf

/-- An upper semicontinuous function is bounded above on a compact set. -/
theorem UpperSemicontinuousOn.bddAbove_of_isCompact [Nonempty Œ≤] {s : Set Œ±}
    (hs : IsCompact s) (hf : UpperSemicontinuousOn f s) : BddAbove (f '' s) :=
  LowerSemicontinuousOn.bddBelow_of_isCompact (Œ≤ := Œ≤·µí·µà) hs hf

end UpperSemicontinuous

end LinearOrder

section CompleteLinearOrder

variable {Œ≤ Œ± : Type*} [TopologicalSpace Œ±] {f : Œ± ‚Üí Œ≤} {s : Set Œ±}

variable [CompleteLinearOrder Œ≤]

section LowerSemicontinuous

/-- A lower semicontinuous function attains its lower bound on a nonempty compact set. -/
theorem LowerSemicontinuousOn.exists_iInf‚ÇÇ_of_isCompact (ne_s : s.Nonempty)
    (hs : IsCompact s) (hf : LowerSemicontinuousOn f s) :
    ‚àÉ a ‚àà s, f a = ‚®Ö x ‚àà s, f x := by
  obtain ‚ü®a, ha, ha_le‚ü© := LowerSemicontinuousOn.exists_forall_le_of_isCompact ne_s hs hf
  use a, ha, le_antisymm (le_iInf‚ÇÇ_iff.mpr ha_le) (iInf‚ÇÇ_le a ha)

/-- A lower semicontinuous function attains its lower bound on a nonempty compact set -/
theorem LowerSemicontinuous.exists_iInf‚ÇÇ_of_isCompact (ne_s : s.Nonempty)
    (hs : IsCompact s) (hf : LowerSemicontinuous f) :
    ‚àÉ a ‚àà s, f a = ‚®Ö x ‚àà s, f x :=
  (hf.lowerSemicontinuousOn s).exists_iInf‚ÇÇ_of_isCompact ne_s hs

variable {Œπ : Type*} {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {a : Œ±} {I : Set Œπ}

theorem lowerSemicontinuousWithinAt_iSup‚ÇÇ
    (hf : ‚àÄ i ‚àà I, LowerSemicontinuousWithinAt (f i) s a) :
    LowerSemicontinuousWithinAt (fun x ‚Ü¶ ‚®Ü i ‚àà I, f i x) s a := by
  intro b hb
  simp only [lt_iSup_iff] at hb ‚ä¢
  obtain ‚ü®i, hi, hb‚ü© := hb
  apply Filter.Eventually.mp (hf i hi b hb)
  apply Filter.Eventually.of_forall
  intro x hx
  use i, hi, hx

theorem lowerSemicontinuousAt_iSup‚ÇÇ (hf : ‚àÄ i ‚àà I, LowerSemicontinuousAt (f i) a) :
    LowerSemicontinuousAt (fun x ‚Ü¶ ‚®Ü i ‚àà I, f i x) a := by
  simp only [‚Üê lowerSemicontinuousWithinAt_univ_iff] at *
  exact lowerSemicontinuousWithinAt_iSup‚ÇÇ hf

theorem lowerSemicontinuousOn_iSup‚ÇÇ (hf : ‚àÄ i ‚àà I, LowerSemicontinuousOn (f i) s) :
    LowerSemicontinuousOn (fun x ‚Ü¶ ‚®Ü i ‚àà I, f i x) s := fun a ha ‚Ü¶
  lowerSemicontinuousWithinAt_iSup‚ÇÇ (fun i hi ‚Ü¶ hf i hi a ha)

theorem lowerSemicontinuous_iSup‚ÇÇ (hf : ‚àÄ i ‚àà I, LowerSemicontinuous (f i)) :
    LowerSemicontinuous fun x ‚Ü¶ ‚®Ü i ‚àà I, f i x := fun a ha ‚Ü¶
  lowerSemicontinuousAt_iSup‚ÇÇ (fun i hi ‚Ü¶ hf i hi a) ha

theorem lowerSemicontinuousWithinAt_iInf‚ÇÇ (hI : I.Finite)
    (hf : ‚àÄ i ‚àà I, LowerSemicontinuousWithinAt (f i) s a) :
    LowerSemicontinuousWithinAt (fun x ‚Ü¶ ‚®Ö i ‚àà I, f i x) s a := by
  induction I, hI using Set.Finite.induction_on with
  | empty => simp [lowerSemicontinuousWithinAt_const]
  | @insert i J hiJ hJ hrec =>
    simp only [iInf_insert]
    apply LowerSemicontinuousWithinAt.inf
    ¬∑ exact hf i (by exact mem_insert i J)
    ¬∑ apply hrec
      intro j hj
      apply hf j (mem_insert_of_mem i hj)

theorem lowerSemicontinuousAt_iInf‚ÇÇ (hI : I.Finite)
    (hf : ‚àÄ i ‚àà I, LowerSemicontinuousAt (f i) a) :
    LowerSemicontinuousAt (fun x ‚Ü¶ ‚®Ö i ‚àà I, f i x) a := by
  simp only [‚Üê lowerSemicontinuousWithinAt_univ_iff] at *
  exact lowerSemicontinuousWithinAt_iInf‚ÇÇ hI hf

theorem lowerSemicontinuousOn_iInf‚ÇÇ
    (hI : I.Finite) (hf : ‚àÄ i ‚àà I, LowerSemicontinuousOn (f i) s) :
    LowerSemicontinuousOn (fun x ‚Ü¶ ‚®Ö i ‚àà I, f i x) s := fun a ha ‚Ü¶
  lowerSemicontinuousWithinAt_iInf‚ÇÇ hI (fun i hi ‚Ü¶ hf i hi a ha)

theorem lowerSemicontinuous_iInf‚ÇÇ (hI : I.Finite)
    (hf : ‚àÄ i ‚àà I, LowerSemicontinuous (f i)) :
    LowerSemicontinuous fun x ‚Ü¶ ‚®Ö i ‚àà I, f i x := fun a ha ‚Ü¶
  lowerSemicontinuousAt_iInf‚ÇÇ hI (fun i hi ‚Ü¶ hf i hi a) ha

end LowerSemicontinuous

section UpperSemicontinuous

/-- An upper semicontinuous function attains its upper bound on a nonempty compact set. -/
theorem UpperSemicontinuousOn.exists_iSup‚ÇÇ_of_isCompact (ne_s : s.Nonempty)
    (hs : IsCompact s) (hf : UpperSemicontinuousOn f s) :
    ‚àÉ a ‚àà s, f a = ‚®Ü x ‚àà s, f x :=
  LowerSemicontinuousOn.exists_iInf‚ÇÇ_of_isCompact (Œ≤ := Œ≤·µí·µà) ne_s hs hf

/-- An upper semicontinuous function attains its upper bound on a nonempty compact set. -/
theorem UpperSemicontinuous.exists_iSup‚ÇÇ_of_isCompact (ne_s : s.Nonempty)
    (hs : IsCompact s) (hf : UpperSemicontinuous f) :
    ‚àÉ a ‚àà s, f a = ‚®Ü x ‚àà s, f x :=
  LowerSemicontinuous.exists_iInf‚ÇÇ_of_isCompact (Œ≤ := Œ≤·µí·µà) ne_s hs hf

variable {Œπ : Type*} {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {s : Set Œ±} {a : Œ±} {I : Set Œπ}

theorem upperSemicontinuousWithinAt_iInf‚ÇÇ
    (hf : ‚àÄ i ‚àà I, UpperSemicontinuousWithinAt (f i) s a) :
    UpperSemicontinuousWithinAt (fun x ‚Ü¶ ‚®Ö i ‚àà I, f i x) s a :=
  lowerSemicontinuousWithinAt_iSup‚ÇÇ (Œ≤ := Œ≤·µí·µà) hf

theorem upperSemicontinuousAt_iInf‚ÇÇ
    (hf : ‚àÄ i ‚àà I, UpperSemicontinuousAt (f i) a) :
    UpperSemicontinuousAt (fun x ‚Ü¶ ‚®Ö i ‚àà I, f i x) a :=
  lowerSemicontinuousAt_iSup‚ÇÇ (Œ≤ := Œ≤·µí·µà) hf

theorem upperSemicontinuousOn_iInf‚ÇÇ
    (hf : ‚àÄ i ‚àà I, UpperSemicontinuousOn (f i) s) :
    UpperSemicontinuousOn (fun x ‚Ü¶ ‚®Ö i ‚àà I, f i x) s :=
  lowerSemicontinuousOn_iSup‚ÇÇ (Œ≤ := Œ≤·µí·µà) hf

theorem upperSemicontinuous_iInf‚ÇÇ
    (hf : ‚àÄ i ‚àà I, UpperSemicontinuous (f i)) :
    UpperSemicontinuous (fun x ‚Ü¶ ‚®Ö i ‚àà I, f i x) :=
  lowerSemicontinuous_iSup‚ÇÇ (Œ≤ := Œ≤·µí·µà) hf

theorem upperSemicontinuousWithinAt_iSup‚ÇÇ (hI : I.Finite)
    (hf : ‚àÄ i ‚àà I, UpperSemicontinuousWithinAt (f i) s a) :
    UpperSemicontinuousWithinAt (fun x ‚Ü¶ ‚®Ü i ‚àà I, f i x) s a :=
  lowerSemicontinuousWithinAt_iInf‚ÇÇ (Œ≤ := Œ≤·µí·µà) hI hf

theorem upperSemicontinuousAt_iSup‚ÇÇ (hI : I.Finite)
    (hf : ‚àÄ i ‚àà I, UpperSemicontinuousAt (f i) a) :
    UpperSemicontinuousAt (fun x ‚Ü¶ ‚®Ü i ‚àà I, f i x) a :=
  lowerSemicontinuousAt_iInf‚ÇÇ (Œ≤ := Œ≤·µí·µà) hI hf

theorem upperSemicontinuousOn_iSup‚ÇÇ (hI : I.Finite)
    (hf : ‚àÄ i ‚àà I, UpperSemicontinuousOn (f i) s) :
    UpperSemicontinuousOn (fun x ‚Ü¶ ‚®Ü i ‚àà I, f i x) s :=
  lowerSemicontinuousOn_iInf‚ÇÇ (Œ≤ := Œ≤·µí·µà) hI hf

theorem upperSemicontinuous_iSup‚ÇÇ (hI : I.Finite)
    (hf : ‚àÄ i ‚àà I, UpperSemicontinuous (f i)) :
    UpperSemicontinuous (fun x ‚Ü¶ ‚®Ü i ‚àà I, f i x) :=
  lowerSemicontinuous_iInf‚ÇÇ (Œ≤ := Œ≤·µí·µà) hI hf

end UpperSemicontinuous

-- Lemmas which depend on two topologies

section LowerSemicontinuous

variable {Œπ : Type*} {f : Œπ ‚Üí Œ± ‚Üí Œ≤} {s : Set Œ±} {a : Œ±}
    [TopologicalSpace Œπ] {I : Set Œπ}

theorem lowerSemicontinuousOn_iInf‚ÇÇ_of_isProper
    {f : Œ± ‚Üí Œ≤}
    {Œ≥ : Type*} [TopologicalSpace Œ≥] {g : Œ± ‚Üí Œ≥} (hg : IsProperMap g)
    (hf : LowerSemicontinuous f) :
    LowerSemicontinuousOn (fun z ‚Ü¶ ‚®Ö x ‚àà g ‚Åª¬π' {z}, f x) (range g) := by
  intro z hz b hb
  dsimp at hb
  have hinf (z) (hz : z ‚àà range g) :
    ‚àÉ a ‚àà g ‚Åª¬π' {z}, f a = ‚®Ö x ‚àà g ‚Åª¬π' {z}, f x := by
    apply LowerSemicontinuousOn.exists_iInf‚ÇÇ_of_isCompact
    ¬∑ exact hz
    ¬∑ apply hg.isCompact_preimage isCompact_singleton
    ¬∑ exact LowerSemicontinuous.lowerSemicontinuousOn hf (g ‚Åª¬π' {z})
  have (a) (ha : a ‚àà g ‚Åª¬π' {z}) :
    ‚àÉ u, IsOpen u ‚àß a ‚àà u ‚àß ‚àÄ x ‚àà u, b < f x := by
    specialize hf a b ?_
    ¬∑ obtain ‚ü®m, hm, hm'‚ü© := hinf z hz
      apply lt_of_lt_of_le hb
      exact biInf_le f ha
    ¬∑ rw [Filter.eventually_iff, mem_nhds_iff] at hf
      obtain ‚ü®u, hu, hu', hau‚ü© := hf
      exact ‚ü®u, hu', hau, hu‚ü©
  let v := ‚ãÉ (a : Œ±) (ha : a ‚àà g ‚Åª¬π' {z}), (this a ha).choose
  have hv : IsOpen v := sorry
  have hvz : g ‚Åª¬π' {z} ‚äÜ v := sorry
  have hv' : IsOpen (g '' v·∂ú)·∂ú := sorry
  have hv'z : z ‚àà (g '' v·∂ú)·∂ú := sorry
  rw [Filter.eventually_iff, mem_nhdsWithin]
  use (g '' v·∂ú)·∂ú, hv', hv'z
  rintro c ‚ü®hc, hc'‚ü©
  dsimp
  obtain ‚ü®m, hm, hm'‚ü© := hinf c hc'
  rw [‚Üê hm']
  simp only [mem_preimage, mem_singleton_iff] at hm
  simp only [mem_compl_iff, mem_image, not_exists, not_and] at hc
  simp_rw [not_imp_not] at hc
  specialize hc m hm
  simp [v] at hc
  obtain ‚ü®i, hi, hc‚ü© := hc
  exact ((this i hi).choose_spec.2.2 m hc)
  -- unfinished


theorem upperSemicontinuousOn_iSup‚ÇÇ_of_isProper
    {f : Œ± ‚Üí Œ≤}
    {Œ≥ : Type*} [TopologicalSpace Œ≥] {g : Œ± ‚Üí Œ≥} (hg : IsProperMap g)
    (hf : UpperSemicontinuous f) :
    UpperSemicontinuousOn (fun z ‚Ü¶ ‚®Ü x ‚àà g ‚Åª¬π' {z}, f x) (range g) :=
  lowerSemicontinuousOn_iInf‚ÇÇ_of_isProper (Œ≤ := Œ≤·µí·µà) hg hf


end LowerSemicontinuous

end CompleteLinearOrder

end Semicontinuity


