import Mathlib.Topology.Semicontinuous
import Mathlib.Topology.Order.LowerUpperTopology

section Semicontinuity

/-!

- `LowerSemicontinuous.is_compact.exists_forall_le` :
  We prove that lower semicontinuous functions attain their lower bound
  on a nonempty compact set.

- `LowerSemicontinuous.bdd_below_on.is_compact` :
  As a consequence, a lower semicontinuous function
  on a compact set is bounded below.

We then prove the opposite results for upper semicontinuous functions :

- `UpperSemicontinuous.is_compact.exists_forall_ge`

- `bdd_above_on.is_compact`

The proofs follow Bourbaki, *General Topology*, chapter 4, ¬ß6, n¬∞2.
I do them twice (copy paste worked well), without trying to get ones
from the other by passing to the opposite order on `Œ≤`.

However, they could also be done using the general machinery already in mathlib,
namely proving that a function `f: Œ± ‚Üí Œ≤` is upper semicontinuous iff it is continuous
when `Œ≤` is endowed with `with_lower_topology Œ≤`, and characterizing
the compact sets of `with_lower_topology Œ≤` as those which have a maximal element.

I tried to do so but quickly bumped on missing instances,
such as `complete_linear_order_topology (with_lower_topology Œ≤)`.
And indeed, `with_lower_topology Œ≤` does ***not*** satisfy `order_topology` !

In any case, `with_upper_topology` is missing, so we should also play with
the opposite order.

Another difficulty is the type of order we want to impose on Œ≤.
Ultimately, it has to be `conditionally_complete_linear_order Œ≤`, to allow for `‚Ñù`,
but it would simplify the proofs to do it for `complete_linear_order Œ≤`,
and adding `‚ä§` and `‚ä•` at the end if needed.
Inded, for `conditionally_complete_linear_order Œ≤`, the `supr` and `infi` only
do what one expects under additional `bdd_above` or `bdd_below` assumptions
which are painful to check each time.
(Moreover, the `simp` lemmas may be missing. )

-/
open scoped Filter Topology

open Set Filter

section LinearOrder

universe u v

variable {Œ± : Type u} {Œ≤ : Type v} [TopologicalSpace Œ±] {f : Œ± ‚Üí Œ≤}

variable [LinearOrder Œ≤]

section LowerSemicontinuous

theorem LowerSemicontinuousWithinAt.sup {g : Œ± ‚Üí Œ≤} {s : Set Œ±} {a : Œ±}
    (hf : LowerSemicontinuousWithinAt f s a) (hg : LowerSemicontinuousWithinAt g s a) :
    LowerSemicontinuousWithinAt (fun x => f x ‚äî g x) s a := by
  intro b hb
  simp only [lt_sup_iff] at hb ‚ä¢
  cases' hb with hb hb
  ¬∑ filter_upwards [hf b hb] with x using Or.intro_left _
  ¬∑ filter_upwards [hg b hb] with x using Or.intro_right _

theorem LowerSemicontinuousAt.sup {g : Œ± ‚Üí Œ≤} {a : Œ±} (hf : LowerSemicontinuousAt f a)
    (hg : LowerSemicontinuousAt g a) : LowerSemicontinuousAt (fun x => f x ‚äî g x) a := by
  rw [‚Üê lowerSemicontinuousWithinAt_univ_iff] at *
  exact hf.sup hg

theorem LowerSemicontinuousOn.sup {s : Set Œ±} {g : Œ± ‚Üí Œ≤} (hf : LowerSemicontinuousOn f s)
    (hg : LowerSemicontinuousOn g s) : LowerSemicontinuousOn (fun x => f x ‚äî g x) s := fun a ha =>
  (hf a ha).sup (hg a ha)

theorem LowerSemicontinuous.sup {g : Œ± ‚Üí Œ≤} (hf : LowerSemicontinuous f)
    (hg : LowerSemicontinuous g) : LowerSemicontinuous fun x => f x ‚äî g x := fun a =>
  (hf a).sup (hg a)

theorem LowerSemicontinuousWithinAt.inf {g : Œ± ‚Üí Œ≤} {s : Set Œ±} {a : Œ±}
    (hf : LowerSemicontinuousWithinAt f s a) (hg : LowerSemicontinuousWithinAt g s a) :
    LowerSemicontinuousWithinAt (fun x => f x ‚äì g x) s a := by
  intro b hb
  simp only [lt_inf_iff] at hb ‚ä¢
  exact Eventually.and (hf b hb.1) (hg b hb.2)

theorem LowerSemicontinuousAt.inf {g : Œ± ‚Üí Œ≤} {a : Œ±} (hf : LowerSemicontinuousAt f a)
    (hg : LowerSemicontinuousAt g a) : LowerSemicontinuousAt (fun x => f x ‚äì g x) a := by
  rw [‚Üê lowerSemicontinuousWithinAt_univ_iff] at *
  exact hf.inf hg

theorem LowerSemicontinuousOn.inf {g : Œ± ‚Üí Œ≤} {s : Set Œ±} (hf : LowerSemicontinuousOn f s)
    (hg : LowerSemicontinuousOn g s) : LowerSemicontinuousOn (fun x => f x ‚äì g x) s := fun a ha =>
  (hf a ha).inf (hg a ha)

theorem LowerSemicontinuous.inf {g : Œ± ‚Üí Œ≤} (hf : LowerSemicontinuous f)
    (hg : LowerSemicontinuous g) : LowerSemicontinuous fun x => f x ‚äì g x := fun a =>
  (hf a).inf (hg a)

theorem lowerSemicontinuousOn_iff_restrict {s : Set Œ±} :
    LowerSemicontinuousOn f s ‚Üî LowerSemicontinuous (s.restrict f) := by
  rw [LowerSemicontinuousOn, LowerSemicontinuous, SetCoe.forall]
  refine' forall‚ÇÇ_congr fun a ha => forall‚ÇÇ_congr fun b _ => _
  simp only [nhdsWithin_eq_map_subtype_coe ha, eventually_map, restrict]

theorem lowerSemicontinuousOn_iff_preimage_Ioi {s : Set Œ±} :
    LowerSemicontinuousOn f s ‚Üî ‚àÄ b, ‚àÉ u : Set Œ±, IsOpen u ‚àß s ‚à© f ‚Åª¬π' Set.Ioi b = s ‚à© u := by
  simp only [lowerSemicontinuousOn_iff_restrict, restrict_eq,
    lowerSemicontinuous_iff_isOpen_preimage, preimage_comp, isOpen_induced_iff,
    Subtype.preimage_coe_eq_preimage_coe_iff, eq_comm]

theorem lowerSemicontinuousOn_iff_preimage_Iic {s : Set Œ±} :
    LowerSemicontinuousOn f s ‚Üî ‚àÄ b, ‚àÉ v : Set Œ±, IsClosed v ‚àß s ‚à© f ‚Åª¬π' Set.Iic b = s ‚à© v := by
  simp only [lowerSemicontinuousOn_iff_restrict, restrict_eq,
    lowerSemicontinuous_iff_isClosed_preimage, preimage_comp, isClosed_induced_iff,
    Subtype.preimage_coe_eq_preimage_coe_iff, eq_comm]

-- TODO: do another proof + match continuous API
/-- A lower semicontinuous function attains its lower bound on a nonempty compact set -/
theorem LowerSemicontinuousOn.exists_forall_le_of_isCompact {s : Set Œ±} (ne_s : s.Nonempty)
    (hs : IsCompact s) (hf : LowerSemicontinuousOn f s) : ‚àÉ a ‚àà s, ‚àÄ x ‚àà s, f a ‚â§ f x := by
  haveI : Nonempty Œ± := ‚ü®ne_s.choose‚ü©
  haveI : Nonempty s := ‚ü®‚ü®ne_s.choose, ne_s.choose_spec‚ü©‚ü©
  let œÜ : Œ≤ ‚Üí Filter Œ± := fun b => ùìü (s ‚à© f ‚Åª¬π' Iic b)
  let ‚Ñ± : Filter Œ± := ‚®Ö a : s, œÜ (f a)
  have : ‚Ñ±.NeBot := by
    refine' iInf_neBot_of_directed _ _
    ¬∑ change Directed GE.ge (fun x ‚Ü¶ (œÜ ‚àò (fun (a : s) ‚Ü¶ f ‚Üëa)) x)
      refine' Directed.mono_comp GE.ge _ _
      ¬∑ intro x y hxy
        refine'
          principal_mono.mpr (inter_subset_inter_right _ (preimage_mono <| Iic_subset_Iic.mpr hxy))
      ¬∑ apply IsTotal.directed
    ¬∑ intro x
      have : (pure x : Filter Œ±) ‚â§ œÜ (f x) := le_principal_iff.mpr ‚ü®x.2, le_refl (f x)‚ü©
      exact neBot_of_le this
  have h‚Ñ±s : ‚Ñ± ‚â§ ùìü s :=
    iInf_le_of_le ‚ü®ne_s.choose, ne_s.choose_spec‚ü© (principal_mono.mpr <| inter_subset_left)
  have h‚Ñ± : ‚àÄ x ‚àà s, ‚àÄ·∂† y in ‚Ñ±, f y ‚â§ f x := fun x hx =>
    mem_iInf_of_mem ‚ü®x, hx‚ü© (by simp only [mem_principal]; apply inter_subset_right)
  obtain ‚ü®a, ha, h‚ü© := hs h‚Ñ±s
  letI : (ùìù a ‚äì ‚Ñ±).NeBot := h
  refine' ‚ü®a, ha, fun x hx => le_of_not_lt fun hxa => _‚ü©
  suffices ‚àÄ·∂† _ in ùìù a ‚äì ‚Ñ±, False by rwa [eventually_const] at this
  filter_upwards [(hf a ha (f x) hxa).filter_mono (inf_le_inf_left _ h‚Ñ±s),
    (h‚Ñ± x hx).filter_mono (inf_le_right : ùìù a ‚äì ‚Ñ± ‚â§ ‚Ñ±)] using fun y h‚ÇÅ h‚ÇÇ => not_le_of_lt h‚ÇÅ h‚ÇÇ

/-- A lower semicontinuous function is bounded above on a compact set. -/
theorem LowerSemicontinuousOn.bddBelow_of_isCompact [Nonempty Œ≤] {s : Set Œ±} (hs : IsCompact s)
    (hf : LowerSemicontinuousOn f s) : BddBelow (f '' s) := by
  cases s.eq_empty_or_nonempty with
  | inl h =>
      simp only [h, Set.image_empty]
      exact bddBelow_empty
  | inr h =>
      obtain ‚ü®a, _, has‚ü© := LowerSemicontinuousOn.exists_forall_le_of_isCompact h hs hf
      use f a
      rintro b ‚ü®x, hx, rfl‚ü©; exact has x hx

end LowerSemicontinuous

section UpperSemicontinuous

theorem UpperSemicontinuousAt.comp {Œ≥ : Type _} [TopologicalSpace Œ≥] {g : Œ≥ ‚Üí Œ±} {x : Œ≥}
    (hf : UpperSemicontinuousAt f (g x)) (hg : ContinuousAt g x) :
    UpperSemicontinuousAt (f ‚àò g) x := fun b hb => hg.eventually (hf b hb)

theorem UpperSemicontinuous.comp {Œ≥ : Type _} [TopologicalSpace Œ≥] {g : Œ≥ ‚Üí Œ±}
    (hf : UpperSemicontinuous f) (hg : Continuous g) : UpperSemicontinuous (f ‚àò g) := fun x =>
  (hf (g x)).comp hg.continuousAt

theorem UpperSemicontinuousWithinAt.comp {Œ≥ : Type _} [TopologicalSpace Œ≥] {g : Œ≥ ‚Üí Œ±} {s : Set Œ≥}
    {t : Set Œ±} {x : Œ≥} (hf : UpperSemicontinuousWithinAt f t (g x)) (hg : ContinuousWithinAt g s x)
    (hg' : MapsTo g s t) : UpperSemicontinuousWithinAt (f ‚àò g) s x := fun b hb =>
  (hg.tendsto_nhdsWithin hg').eventually (hf b hb)

theorem UpperSemicontinuousOn.comp {Œ≥ : Type _} [TopologicalSpace Œ≥] {g : Œ≥ ‚Üí Œ±} {s : Set Œ≥}
    {t : Set Œ±} (hf : UpperSemicontinuousOn f t) (hg : ContinuousOn g s) (hg' : MapsTo g s t) :
    UpperSemicontinuousOn (f ‚àò g) s := fun x hx => (hf (g x) (hg' hx)).comp (hg x hx) hg'

theorem upperSemicontinuousOn_iff_restrict {s : Set Œ±} :
    UpperSemicontinuousOn f s ‚Üî UpperSemicontinuous (s.restrict f) :=
  lowerSemicontinuousOn_iff_restrict  (Œ≤ := Œ≤·µí·µà)

/-- An upper semicontinuous function attains its upper bound on a nonempty compact set -/
theorem UpperSemicontinuousOn.exists_forall_ge_of_isCompact {s : Set Œ±} (ne_s : s.Nonempty)
    (hs : IsCompact s) (hf : UpperSemicontinuousOn f s) : ‚àÉ a ‚àà s, ‚àÄ x ‚àà s, f x ‚â§ f a := by
  apply LowerSemicontinuousOn.exists_forall_le_of_isCompact (Œ≤ := Œ≤·µí·µà) ne_s hs
  exact hf

/-- An upper semicontinuous function is bounded above on a compact set. -/
theorem UpperSemicontinuousOn.bddAbove_of_isCompact [Nonempty Œ≤] {s : Set Œ±}
    (hs : IsCompact s) (hf : UpperSemicontinuousOn f s) : BddAbove (f '' s) :=
  LowerSemicontinuousOn.bddBelow_of_isCompact (Œ≤ := Œ≤·µí·µà) hs hf

end UpperSemicontinuous

end LinearOrder

section CompleteLinearOrder

variable {Œ≤ Œ± : Type _} [TopologicalSpace Œ±] {f : Œ± ‚Üí Œ≤}

variable [CompleteLinearOrder Œ≤]

/-- A lower semicontinuous function attains its lower bound on a nonempty compact set -/
theorem LowerSemicontinuousOn.exists_iInf_of_isCompact {s : Set Œ±} (ne_s : s.Nonempty)
    (hs : IsCompact s) (hf : LowerSemicontinuousOn f s) : ‚àÉ a ‚àà s, f a = ‚®Ö x ‚àà s, f x := by
  obtain ‚ü®a, ha, ha_le‚ü© := LowerSemicontinuousOn.exists_forall_le_of_isCompact ne_s hs hf
  use a; apply And.intro ha
  apply le_antisymm
  rw [le_iInf‚ÇÇ_iff]; intro x hx; exact ha_le x hx
  exact iInf‚ÇÇ_le a ha

/-- A lower semicontinuous function attains its lower bound on a nonempty compact set -/
theorem LowerSemicontinuous.exists_iInf_of_isCompact {s : Set Œ±} (ne_s : s.Nonempty)
    (hs : IsCompact s) (hf : LowerSemicontinuous f) : ‚àÉ a ‚àà s, f a = ‚®Ö x ‚àà s, f x :=
  (hf.lowerSemicontinuousOn s).exists_iInf_of_isCompact ne_s hs

/-- An upper semicontinuous function attains its upper bound on a nonempty compact set -/
theorem UpperSemicontinuousOn.exists_iSup_of_isCompact {s : Set Œ±} (ne_s : s.Nonempty)
    (hs : IsCompact s) (hf : UpperSemicontinuousOn f s) : ‚àÉ a ‚àà s, f a = ‚®Ü x ‚àà s, f x := by
  apply LowerSemicontinuousOn.exists_iInf_of_isCompact (Œ≤ := Œ≤·µí·µà) ne_s hs hf

-- Lemmas which depend on two topologies

theorem lowerSemicontinuousWithinAt_iSup‚ÇÇ {Œπ : Type _} {f : Œπ ‚Üí Œ± ‚Üí Œ≤}
    {s : Set Œ±} {a : Œ±}
    [TopologicalSpace Œπ] {I : Set Œπ} (ne_I : Set.Nonempty I) (hI : IsCompact I)
    (hf : ‚àÄ i ‚àà I, LowerSemicontinuousWithinAt (f i) s a)
    (hf' : UpperSemicontinuousOn (fun i ‚Ü¶ f i a) I) :
    LowerSemicontinuousWithinAt (fun x => ‚®Ü i ‚àà I, f i x) s a := by
  intro t ht
  dsimp at ht
  obtain ‚ü®i, hi, hi'‚ü© := hf'.exists_iSup_of_isCompact ne_I hI
  rw [‚Üê hi'] at ht
  let h := hf i hi t ht
  dsimp
  apply Filter.Eventually.mp h
  apply Filter.eventually_of_forall
  intro x hx
  apply lt_of_lt_of_le hx
  apply le_iSup‚ÇÇ i hi

theorem upperSemicontinuousWithinAt_iInf‚ÇÇ {Œπ : Type _} {f : Œπ ‚Üí Œ± ‚Üí Œ≤}
    {s : Set Œ±} {a : Œ±}
    [TopologicalSpace Œπ] {I : Set Œπ} (ne_I : Set.Nonempty I) (hI : IsCompact I)
    (hf : ‚àÄ i ‚àà I, UpperSemicontinuousWithinAt (f i) s a)
    (hf' : LowerSemicontinuousOn (fun i ‚Ü¶ f i a) I) :
    UpperSemicontinuousWithinAt (fun x => ‚®Ö i ‚àà I, f i x) s a :=
  lowerSemicontinuousWithinAt_iSup‚ÇÇ (Œ≤ := Œ≤·µí·µà) ne_I hI hf hf'




end CompleteLinearOrder

end Semicontinuity
